extern fun puts(str: String): Int

fun main(): Int32 {
    val a: Int = 542 + 54578 / 3;
    var b: Int = a * 2;
    b = b / 4;

    var str: String = "hello world";
    puts(str);

    var twoD: Int[2] = [1, 5];
    var myArray: Int[3] = makeArray(1, 777, 3);
    var myArrayCopy: Int[3] = takeArray(myArray);
    var otherCopy: Int[3] = myArrayCopy;
    var repeatArray: Int[400] = [1, 2, 3, 4; 100];
    var repeatStringArray: String[400] = ["a", "bb", "ccc", "dddd"; 100];
    repeatStringArray[0] = "hello";
    puts(repeatStringArray[377]);

    var multiA: String[3][2] = [["a", "b", "ccc"], ["d", "e", "f"]];
    var multiB: String[3][2] = multiA;
    puts(multiA[1][2]);

    var xy: Point[2] = [
        Point {
            x: 5,
            y: 7,
        },
        Point {
            x: 5,
            y: 7,
        },
    ];

    var x: Int = (xy[0].x);
    var y: Int = xy[0].y;

    var boolean: Bool = true && false || (5 <= 88);

    {
        {
            puts("in a block");
        }
    }

    if boolean {
        puts("boolean is true");
    }

    while x == 5 && y == 7 {
        x = 3;
    }

    for i in -10 < 10 {

    }

    for i in zero() <= 10 {

    }

    for i in 10 >= 0 by -1 {

    }

    for i in 10 >= 0 by -1 {

    }

    for i in 10.0 >= 0.0 by -1.0 {

    }

    hello(
        a,
        b,
    );

    return 0;
}

struct Point {
    x: Int,
    y: Int,
}

fun zero(): Int {
    return 0;
}

fun print(msg: String): Void {
    puts("Hello");
}

fun hello(num: Int, othernum: Int): Int {
    val sum: Int = num + othernum;
    return sum;
}

fun makeArray(a: Int, b: Int, c: Int): Int[3] {
    return [a, b, c];
}

fun takeArray(a: Int[3]): Int[3] {
    return a;
}