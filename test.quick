extern fun puts(str String) UInt
extern fun malloc(size UInt) *Void
extern fun free(ptr *Void) Void

enum Name {
    Albert,
    Benjamin,
    Carson,
    Derek,
}

fun main() Int32 {
    val someonesName = Name.Carson;

    var function *fun(Int, Int) Int = &add;
    function.*(1, 2);

    defer {
        puts("defer in main");
    }

    var inferTwoD = [1, 5];
    var inferPoint = Point { x = 1, y = 2 };

    val a = 542 + 54578 / 3;
    var b Int = a * 2;
    val c = b /= b / 4;

    val str String = "hello world";
    puts(str);

    var byte UInt8 = 255 as UInt8;
    var bytePtr *UInt8 = &byte;
    var otherByte UInt8 = bytePtr.*;

    /*
    /*
    var point: Point = Point { x: 1, y: 2 };
    var pointPtr: Point* = &point;
    var otherPoint: Point = *pointPtr;
    var pointX: Int = pointPtr.x;
    var pointSize: Int = sizeof Point;
    */
    */

    var heapPoint *Point = malloc(sizeof Point) as *Point;
    heapPoint.* = Point { x = 5, y = 5 };
    val fromHeapX = heapPoint.x;
    free(heapPoint);

    var myArray [3]Int = makeArray(1, 777, 3);
    var myArrayCopy [3]Int = takeArray(myArray);
    var otherCopy [3]Int = myArrayCopy;
    var repeatArray [400]Int = [1, 2, 3, 4; 100];
    var repeatStringArray [400]String = ["a", "bb", "ccc", "dddd"; 100];
    repeatStringArray[0] = "hello";
    puts(repeatStringArray[377]);

    var multiA [2][3]String = [["a", "b", "ccc"], ["d", "e", "f"]];
    var multiB [2][3]String = multiA;
    puts(multiA[1][2]);

    var xy [2]Point = [
        Point {
            x = 5,
            y = 7,
        },
        Point {
            x = 5,
            y = 7,
        },
    ];

    var x Int = (xy[0].x);
    var y Int = xy[0].y;

    Point.Multiply(&xy[0], &xy[1]);
    xy[0].Multiply(&xy[1]);
    xy[0].GenericThing.<Point>(&xy[1]);

    Point.Static(x);

    var ch Char = 'a';

    var boolean Bool = true && false || (5 <= 88);

    {
        {
            puts("in
            a block");
        }
    }

    if boolean {
        puts("boolean is true");
    }

    if boolean && boolean {
        puts("boolean is true");
    } else if boolean {

    } else {

    }

    while x == 5 && y == 7 {
        x = 3;
    }

    for i of -10 < 10 {
        defer puts("defer in loop1");
        defer puts("defer in loop2");
    }

    for i of zero() <= 10 {
        defer puts("defer in loop");

        {
            defer puts("defer in block in loop");
        }

        defer puts("defer later in loop");

        return 0;
    }

    for i of 10 >= 0 by -1 {

    }

    for i of 10 >= 0 by -1 {

    }

    for default of 10.0 >= 0.0 by -1.0 {

    }

    val si = 1;
    switch si case 1 {
        puts("1");
    } case 2 {
        puts("2");
    } else {
        puts("other");
    }

    hello(
        a,
        b,
    );

    val genericResult = genericFunction.<Int, Bool>(777, true);
    val genericResult2 = genericFunction.<Bool, Bool>(false, true);

    val nonGenericPtr = &genericFunction.<Int, Int>;

    return 0;
}

fun add(a Int, b Int) Int {
    return a + b;
}

fun zero() Int {
    return 0;
}

fun takesEnum(name Name) Void {
    if name == Name.Albert {
        puts("albert");
    }
}

fun takesStruct(point Point) Void {
}

fun print(msg String) Void {
    puts("Hello");
}

fun hello(num Int, othernum Int) Int {
    val sum Int = num + othernum;
    return sum;
}

fun makeArray(a Int, b Int, c Int) [3]Int {
    return [a, b, c];
}

fun takeArray(a [3]Int) [3]Int {
    return a;
}

fun returnFunPtr() *fun(Int, Int) Int {
    return &add;
}

fun genericFunction<A, B>(a A, b B) A {
    val arrayA = [a, a, a];
    val arrayB = [b, b];

    return arrayA[2];
}