struct Iterable
{
    index Int;

    func Next(me *var Iterable) Bool
    {
        me.index += 1;

        return me.index <= 10;
    }

    func Get(me *val Iterable) Int
    {
        return me.index;
    }
}

// struct NonIterable
// {
//     index Int;
//
//     func Next(me *var NonIterable, a Int) Bool
//     {
//         me.index += 1;
//
//         return me.index <= 10;
//     }
//
//     func Get(me *val NonIterable) Int
//     {
//         return me.index;
//     }
// }

func Main() Int
{
    var sum UInt = 0;

    for (val i UInt of 0 < 10)
    {
        sum += i;
    }

    for (val i UInt in [6, 7, 32])
    {
        sum += i;
    }

    val hello = "hello";
    for (val i of 0 < hello.count)
    {
        Console.WriteChar(hello.Get(i));
    }

    Console.WriteLn("\n");

    for (val char in "hello")
    {
        Console.WriteChar(char);
        Console.WriteLn("");
    }

    Console.WriteLn("");

    for (val string in ["hello", "world", "hi", "ok", "bye"])
    {
        for (val char in string)
        {
            Console.WriteChar(char);
        }

        Console.WriteLn("");
    }

    Console.WriteLn("");

    var iterable1 = Iterable { index = 0 };

    for (var a in iterable1)
    {
        val string = scope String.Create();
        string.Push.<StringView>("Iterable1: ");
        string.Push.<Int>(a);

        Console.WriteLn(string.ToView());
    }

    var iterable2 = Iterable { index = 0 };

    Console.WriteLn("");

    while (iterable2.Next())
    {
        val a = iterable2.Get();

        val string = scope String.Create();
        string.Push.<StringView>("Iterable2: ");
        string.Push.<Int>(a);

        Console.WriteLn(string.ToView());
    }

    return 0;
}