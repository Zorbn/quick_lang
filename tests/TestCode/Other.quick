using Conflictor;
using QuickCode;

struct GenericStruct.[A, B]
{
    a A;
    b B;
}

struct SimpleGeneric.[A]
{
    a A;
}

struct ContainsPoint
{
    point Point;
}

func takesPoint(point Point) Void
{
    Puts("got point");
    Puts(hi);
}

func genericFunction2.[C, D](a C, b D) C
{
    val arrayA = [a, a, a];
    val arrayB = [b, b];

    val genericStruct = GenericStruct.[A, B] { a = 5, b = false };

    return arrayA[2];
}

func callsMain() Void
{
    var containsFuncPtr = ContainsFuncPtr { funcPtr = *print };
    containsFuncPtr.funcPtr.*();

    val argc = 5;
    val argv = "hello";
    Main(argc, *argv.data);
}

func useMyString(myCharSpan MyCharSpan) Void
{

}

struct Point
{
    x Int;
    y Int;

    func DoThingWithPoint(me *var Point) Void;
}