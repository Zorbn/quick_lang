struct Point
{
    x Int;
    y Int;

    func Add(self *Point, other *Point) Void
    {
        self.x += other.x;
        self.y += other.y;
    }

    func Multiply(self *Point, other *Point) Void
    {
        self.x *= other.x;
        self.y *= other.y;
    }

    func Static(a Int) Void
    {

    }

    func GenericThing<T>(self *Point, a T) Void
    {
    }
}

struct GenericStruct<A, B>
{
    a A;
    b B;

    func SetA(self *GenericStruct.<A, B>, a A) Void
    {
        val genericStruct = GenericStruct.<A, B> { a = self.a, b = self.b };
        // genericFunction2.<A, B>("hello", "world");
        self.a = a;
    }

    func SetB(self *GenericStruct.<A, B>, b B) Void
    {
        self.b = b;
    }

    func GetA(self *GenericStruct.<A, B>) A
    {
        return self.a;
    }

    func GetB(self *GenericStruct.<A, B>) B
    {
        return self.b;
    }

    func DoThingWithStringStruct(self *GenericStruct.<String, A>) Void
    {
        print("doing thing");
    }

    // func DoThingWithNestedStruct(self *GenericStruct.<SimpleGeneric.<UInt16>, A>) Void
    // {
    //     print("doing thing");
    // }

    func DoThingWithNestedStruct(self *SimpleGeneric.<UInt16>) Void
    {
        print("doing thing");
    }

    func DoThingWithNestedFunction(self *func(SimpleGeneric.<UInt16>) GenericStruct.<A, B>) Void
    {
        print("doing thing");
    }
}

struct SimpleGeneric<A>
{
    a A;
}

func genericFunction2<C, D>(a C, b D) C
{
    val arrayA = [a, a, a];
    val arrayB = [b, b];

    val genericStruct = GenericStruct.<A, B> { a = 5, b = false };

    return arrayA[2];
}