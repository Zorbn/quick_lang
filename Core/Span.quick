struct Span.<T>
{
    data *val T;
    count Int;

    func Get(me *val Span.<T>, index Int) T
    {
        if (index < 0 || index >= me.count)
        {
            Runtime.Error("Span access out of bounds!");
        }

        val dataStart = me.data as UInt;
        val dataIndex = dataStart + index as UInt * sizeof T;
        val dataPointer = dataIndex as *val T;

        return dataPointer.*;
    }

    func Equals(me *val Span.<T>, other *val Span.<T>) Bool
    {
        if (me.count != other.count) return false;

        for (val i of 0 < me.count)
            if (me.Get(i) != other.Get(i))
                return false;

        return true;
    }

    func ToIterable(me Span.<T>) SpanIterable.<T>
    {
        return SpanIterable.<T>.Create(me);
    }
}

struct SpanIterable.<T>
{
    span Span.<T>;
    index Int;

    func Create(span Span.<T>) SpanIterable.<T>
    {
        return SpanIterable.<T>
        {
            span = span,
            index = -1,
        };
    }

    func Next(me *var SpanIterable.<T>) Bool
    {
        me.index += 1;

        return me.index < me.span.count;
    }

    func GetCurrent(me *val SpanIterable.<T>) T
    {
        return me.span.Get(me.index);
    }
}