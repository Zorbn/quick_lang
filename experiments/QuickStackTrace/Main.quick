// Clang: cargo run . --core-path ..\..\Core\ --debug --cflags -Lc:/lib64 -lDbghelp -lKernel32
// MSVC: cargo run . --core-path ..\..\Core\ --msvc --debug --cflags /link Dbghelp.lib Kernel32.lib user32.lib winmm.lib shell32.lib
func Main() Int
{
    AnotherFunctionWoo();

    AFunctionThatIsAlsoThere();

    Console.WriteLine("");

    PrintStackTrace();

    return 0;
}

func AnotherFunctionWoo() Void
{
    // I don't do much.
}

func AFunctionThatIsAlsoThere() Void
{
    // Wow check out this thing:
    HmmImGonnaCallPrintStackTrace();
}

func HmmImGonnaCallPrintStackTrace() Void
{
    PrintStackTrace();
}

func PrintStackTrace() Void
{
    const maxFrames UInt = 100;

    var stack = [0 as *var Void; maxFrames];
    var process = GetCurrentProcess();

    var result = SymInitialize(process, 0 as *val Char, 1);
    if (result == 0 as Int32)
    {
        var lastError = GetLastError();
        // Console.WriteLine("Failed to initialize");
    }

    var frameCount = RtlCaptureStackBackTrace(0, maxFrames, stack as *var Void, 0 as *var UInt);

    if (frameCount > 0) Console.WriteLine("Successfully acquired stack trace:");

    var symbol = calloc(sizeof SymbolInfo + 254 * sizeof Char, 1) as *var SymbolInfo;
    symbol.maxNameLen = 255;
    symbol.sizeOfStruct = sizeof SymbolInfo;

    var line = calloc(sizeof ImageHlpLine64, 1) as *var ImageHlpLine64;
    line.sizeOfStruct = sizeof ImageHlpLine64;

    for (i of 0 < frameCount)
    {
        result = SymFromAddr(process, stack[i] as UInt64, 0 as *var UInt64, symbol);

        if (result == 0)
        {
            // var lastError = GetLastError();
            Console.WriteLine("Failed to get sym");
            break;
        }

        if (strcmp(symbol.name as *val Char, "main".data) == 0)
        {
            break;
        }

        puts(symbol.name as *val Char);

        var dwDisplacement UInt32 = 0; // Not optional!
        result = SymGetLineFromAddr64(process, stack[i] as UInt64, *dwDisplacement, line);

        if (result == 0)
        {
            // var lastError = GetLastError();
            Console.WriteLine("Failed to get line number");
            break;
        }

        var lineString = String.Create();
        lineString.PushSpan("> ");
        lineString.PushCString(line.fileName);
        lineString.PushSpan(", ");
        lineString.PushUInt32(line.lineNumber);

        Console.WriteLine(lineString.ToSpan());
    }

    Free.<SymbolInfo>(symbol);
    Free.<ImageHlpLine64>(line);
}

struct SymbolInfo
{
    sizeOfStruct UInt32;
    typeIndex UInt32;
    reserved [2]UInt64;
    index UInt32;
    size UInt32;
    modBase UInt64;
    flags UInt32;
    value UInt64;
    address UInt64;
    register UInt32;
    scope UInt32;
    tag UInt32;
    nameLen UInt32;
    maxNameLen UInt32;
    name [1]Char;
}

struct ImageHlpLine64
{
    sizeOfStruct UInt32;
    key *var Void;
    lineNumber UInt32;
    fileName *var Char;
    address UInt64;
}

extern func puts(string *val Char) UInt;
extern func calloc(num UInt, size UInt) *var Void;
extern func strcmp(a *val Char, b *val Char) Int;

extern func GetLastError() UInt32;
extern func RtlCaptureStackBackTrace(framesToSkip UInt, framesToCapture UInt, backTrace *var Void, backTraceHash *var UInt) UInt16;
extern func GetCurrentProcess() *var Void;
extern func SymInitialize(process *var Void, searchPath *val Char, invadeProcess Int32) Int32;
extern func SymFromAddr(process *var Void, address UInt64, displacement *var UInt64, symbol *var SymbolInfo) Int32;
extern func SymGetLineFromAddr64(process *var Void, address UInt64, displacement *var UInt32, line *var ImageHlpLine64) Int32;