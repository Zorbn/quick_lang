// func BFunc() Void
// {
//     var zombie = Zombie.<Int> { data = 7 };
//     zombie.Eat(8);
//     Zombie.<Int>.Eat(zombie, 9);
// }
//
// struct Zombie<T>
// {
//     data T;
//
//     func Eat(me *var Zombie.<T>, newData T) Void
//     {
//         me.data = newData;
//     }
// }

func BFunc() Void
{
    var zombie = Zombie.<Int> { data = 1 };
    Zombie.<Int>.Eat(*zombie, 7);
    Zombie.<Int>.EatGeneric.<Int>(*zombie, 7, 4);
}

struct Zombie<T>
{
    data Int;

    func Eat(me *var Zombie.<T>, newData Int) Void
    {
        me.data = newData;
    }

    func EatGeneric<A>(me *var Zombie.<T>, newData Int, genericThing A) Void
    {
        val otherGenericThing = genericThing;
        me.data = newData;
    }
}