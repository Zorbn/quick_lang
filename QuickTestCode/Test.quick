using Other;
using QuickCode.Test;

alias MyString = String;

extern func puts(str *val Char) UInt;

extern func malloc(size UInt) *var Void;
extern func free(ptr *var Void) Void;

enum Name
{
    Albert;
    Benjamin;
    Carson;
    Derek;
}

union SimpleUnion
{
    a Int;
    b Bool;
    c Int;
    d String;
}

union GenericUnion<A, B>
{
    a A;
    b B;
}

struct None {}

union Maybe<T>
{
    some T;
    none None;
}

struct ContainsFuncPtr
{
    funcPtr *val func() Void;
}

const hi = "hi";

func Main(argc Int, argv *val String) Int
{
    {
        var pointA = Point { x = 0, y = 0 };
        var pointB = Point { x = 0, y = 0 };
        val isEqual = pointA == pointB;
    }

    puts(hi);

    while (true)
    {
        val x = 0;

        switch (x)
        case (0)
        {
            break;
        }
    }

    var containsFuncPtr = ContainsFuncPtr { funcPtr = *print };
    containsFuncPtr.funcPtr.*();

    val myMyString MyString = "MyString";
    useMyString(myMyString);

    var uninitializedPoint Point = ?;
    uninitializedPoint = Point { x = 0, y = 0 };

    uninitializedPoint.DoThingWithPoint();
    QuickCodeTest();
    takesPoint(Point { x = 1, y = 2 });

    val bitwiseMess = 1 & 5 << 5 >> 4 | 3;

    var mySome = Maybe.<Int> { some = 5 };
    val myNone = Maybe.<Int> { none = None {} };

    mySome.some = 3;

    val unwrappedSome = mySome.some;

    const constExpression1 = !false;
    const constExpression2 = "hello world";
    const constExpression3 = -7 as Float32 + 0.5;

    const constant = 4;
    const otherConstant = constant * 77 / 77 * 3 + 4;
    const constBool = 1 == 1 && 2 == 1 || 1 != 1;
    val arrayWithConstSize [constant]Int = [0; constant];
    val countOfArrayWithConstSize = arrayWithConstSize.count;
    val copyOfArrayWithConstSize [4]Int = arrayWithConstSize;
    val countOfCopyOfArrayWithConstSize = copyOfArrayWithConstSize.count;

    val someonesName = Name.Carson;

    var genericUnion = GenericUnion.<Int32, Int64> { b = 0 as Int64 };
    genericUnion.a = 5 as Int32;
    genericUnion.b = 8 as Int64;
    val testUnionAccess = genericUnion.b;
    val unionTag = genericUnion as Tag;
    val otherTag = GenericUnion.<Int32, Int64>.b;

    var function *val func(Int, Int) Int = *add;
    function.*(1, 2);

    defer
    {
        puts("defer in main");
    }

    var inferTwoD = [1, 5];
    var inferPoint = Point { x = 1, y = 2 };

    val a = 542 + 54578 / 3;
    var b Int = a * 2;
    val c = b /= b / 4;

    val str String = "hello world";
    puts(str);

    var byte UInt8 = 255 as UInt8;
    var bytePtr *var UInt8 = *byte;
    var otherByte UInt8 = bytePtr.*;

    /*
    /*
    var point: Point = Point { x: 1, y: 2 };
    var pointPtr: Point* = &point;
    var otherPoint: Point = *pointPtr;
    var pointX: Int = pointPtr.x;
    var pointSize: Int = sizeof Point;
    */
    */

    var heapPoint *var Point = malloc(sizeof Point) as *var Point;
    heapPoint.* = Point { x = 5, y = 5 };
    val fromHeapX = heapPoint.x;
    free(heapPoint as *var Void);

    var myArray [3]Int = makeArray(1, 777, 3);
    var myArrayCopy [3]Int = takeArray(myArray);
    var otherCopy [3]Int = myArrayCopy;
    var repeatArray [400]Int = [1, 2, 3, 4; 100];
    var repeatStringArray [400]String = ["a", "bb", "ccc", "dddd"; 100];
    repeatStringArray[0] = "hello";
    puts(repeatStringArray[377]);

    var multiA [2][3]String = [["a", "b", "ccc"], ["d", "e", "f"]];
    var multiB [2][3]String = multiA;
    puts(multiA[1][2]);

    var xy [2]Point = [
        Point
        {
            x = 5,
            y = 7,
        },
        Point
        {
            x = 5,
            y = 7,
        },
    ];

    var x Int = (xy[0].x);
    var y Int = xy[0].y;

    var ch Char = 'a';

    var boolean Bool = true && false || (5 <= 88);

    {
        {
            puts("in
            a block");
        }
    }

    if (boolean)
    {
        puts("boolean is true");
    }

    if (boolean && boolean)
    {
        puts("boolean is true");
    }
    else if (boolean)
    {

    }
    else
    {

    }

    while (x == 5 && y == 7)
    {
        x = 3;
    }

    for (i of -10 < 10)
    {
        defer puts("defer in loop1");
        defer puts("defer in loop2");

        if (false)
        {
            continue;
        }

        if (true)
        {
            break;
        }

        break;
    }

    for (i of zero() <= 10)
    {
        defer puts("defer in loop");

        {
            defer puts("defer in block in loop");
        }

        defer puts("defer later in loop");

        return 0;
    }

    for (i of 10 >= 0 by -1)
    {

    }

    for (i of 10 >= 0 by -1)
    {

    }

    for (default of 10.0 >= 0.0 by -1.0);

    val si = 1;
    switch (si)
    case (1)
    {
        puts("1");
    }
    case (2)
    {
        puts("2");
    }
    case (3) puts("3");
    else
    {
        puts("other");
    }

    switch (si)
    case (1) puts("1");
    case (2) puts("2");
    case (3) puts("3");
    else puts("other");

    hello(
        a,
        b,
    );

    val genericResult Int = genericFunction.<Int, Bool>(777, true);
    val genericResult2 = genericFunction.<Bool, Bool>(false, true);
    val genericResult3 = genericFunction.<Bool, Bool>(false, true);

    val nonGenericPtr = *genericFunction.<Int, Int>;
    val nonGenericDoublePtr = *nonGenericPtr;

    val genericStruct = GenericStruct.<Int, Int> { a = 5, b = 6 };
    val genericStruct2 = GenericStruct.<Bool, Int> { a = true, b = 6 };
    val genericStruct3 = GenericStruct.<Int, Int> { a = 5, b = 6 };
    val genericStruct4 GenericStruct.<Int, Int> = returnsGeneric();

    puts("reached end"); // Shouldn't happen because of all of the returns, recursions, etc above.

    return 0;
}

func returnsGeneric() GenericStruct.<Int, Int>
{
    return GenericStruct.<Int, Int> { a = 5, b = 6 };
}

func add(a Int, b Int) Int
{
    return a + b;
}

func zero() Int
{
    return 0;
}

func takesEnum(name Name) Void
{
    if (name == Name.Albert)
    {
        puts("albert");
    }
}

func takesStruct(point Point) Void
{
}

func print() Void
{
    puts("Hello");
}

func otherPrint() Void
{
    puts("Goodbye");
}

func hello(num Int, othernum Int) Int
{
    val sum Int = num + othernum;
    return sum;
}

func makeArray(a Int, b Int, c Int) [3]Int
{
    return [a, b, c];
}

func takeArray(a [3]Int) [3]Int
{
    return a;
}

func returnFunPtr() *val func(Int, Int) Int
    return *add;

func genericFunction<A, B>(a A, b B) A
{
    val arrayA = [a, a, a];
    val arrayB = [b, b];

    genericFunction.<A, B>(a, b);
    genericFunction.<B, A>(b, a);
    // val genericStruct = GenericStruct.<A, B> { a = 5, b = false };

    return arrayA[2];
}